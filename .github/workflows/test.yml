name: Test & Validate

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Allow manual trigger

env:
  PYTHON_VERSION: '3.9'

jobs:
  goal-alignment:
    name: Goal Alignment Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
      
      - name: Run Goal Alignment Tests
        run: |
          python tests/test_goal_alignment.py
      
      - name: Upload results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: goal-alignment-results
          path: test-results/

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-xdist
      
      - name: Run Unit Tests
        run: |
          python tests/run_tests.py --unit
      
      - name: Generate Coverage Report
        run: |
          pytest tests/test_agent_core.py tests/test_llm_router.py \
            --cov=src --cov-report=xml --cov-report=term
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
        if: github.event_name == 'push'
      
      - name: Run Integration Tests
        run: |
          python tests/run_tests.py --integration
        if: github.event_name == 'push'
        continue-on-error: true  # Don't fail workflow if AWS tests fail

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy bandit
      
      - name: Check code formatting (black)
        run: |
          black --check src/ tests/ --line-length=100
      
      - name: Check import sorting (isort)
        run: |
          isort --check-only src/ tests/ --profile=black --line-length=100
      
      - name: Lint with flake8
        run: |
          flake8 src/ tests/ --max-line-length=100 --extend-ignore=E203,W503 --count --show-source --statistics
      
      - name: Type checking (mypy)
        run: |
          mypy src/ --ignore-missing-imports --no-strict-optional
        continue-on-error: true
      
      - name: Security check (bandit)
        run: |
          bandit -r src/ -ll
        continue-on-error: true

  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Check README exists
        run: |
          test -f README.md
          echo "✓ README.md exists"
      
      - name: Check documentation structure
        run: |
          test -d docs/ || (echo "⚠️  docs/ directory missing" && exit 0)
          test -f tests/README.md || (echo "⚠️  tests/README.md missing" && exit 0)
          echo "✓ Documentation structure verified"
      
      - name: Check for broken links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'yes'
          config-file: '.markdown-link-check.json'
        continue-on-error: true

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
        if: always()
        continue-on-error: true

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [goal-alignment, unit-tests, code-quality]
    if: always()
    
    steps:
      - name: Check test results
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "  Test Summary"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "Goal Alignment: ${{ needs.goal-alignment.result }}"
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Code Quality: ${{ needs.code-quality.result }}"
          echo ""
          
          if [[ "${{ needs.goal-alignment.result }}" == "success" && \
                "${{ needs.unit-tests.result }}" == "success" && \
                "${{ needs.code-quality.result }}" == "success" ]]; then
            echo "✓ All critical checks passed!"
            exit 0
          else
            echo "✗ Some checks failed"
            exit 1
          fi
